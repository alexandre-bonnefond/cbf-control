<launch>
  <!-- namespace and mode -->
  <arg name="UAV_NAME"  default="$(optenv UAV_NAME uav1)"/>
  <arg name="RUN_TYPE"  default="$(optenv RUN_TYPE simulation)"/>

  <group ns="$(arg UAV_NAME)">
    <!-- 1) TSDF integrator: builds a TSDF from your filtered Ouster cloud -->
    <node pkg="voxblox_ros"
          type="tsdf_server"
          name="tsdf_server"
          output="screen">
      <!-- TSDF params live under the private 'tsdf' namespace -->
      <rosparam command="load"
                file="$(find cbf_filter)/config/$(arg RUN_TYPE).yaml"
                ns="tsdf"/>
      <!-- pull from your processed Ouster topic -->
      <remap from="pointcloud"
             to="livox/points"/>
    </node>

    <!-- 2) ESDF server: converts TSDF â†’ ESDF incrementally -->
    <node pkg="voxblox_ros"
          type="esdf_server"
          name="esdf_server"
          output="screen">
      <!-- ESDF params under 'esdf' -->
      <rosparam command="load"
                file="$(find cbf_filter)/config/$(arg RUN_TYPE).yaml"
                ns="esdf"/>
      <!-- by default, listens to tsdf_server/tsdf_map -->
    </node>

    <!-- 3) CBF filter: uses Voxblox ESDF output internally -->
    <node pkg="cbf_filter"
          type="cbf_filter_node"
          name="cbf_filter_node"
          output="screen">
      <!-- core CBF params -->
      <rosparam command="load"
                file="$(find cbf_filter)/config/$(arg RUN_TYPE).yaml"/>

      <!-- topic remaps -->
      <remap from="~input_reference"
             to="control_manager/velocity_reference"/>
      <remap from="~odometry"
             to="estimation_manager/odom_main"/>
      <remap from="~filtered_reference"
             to="cbf_filter/filtered_reference"/>
      <remap from="~cbf_gradient_marker"
             to="cbf_filter/gradient_marker"/>
      <remap from="~cbf_nearest_obstacle_marker"
             to="cbf_filter/nearest_obstacle_marker"/>
    </node>
  </group>
</launch>
